import numpy as np
import matplotlib.pyplot as plt
from   scipy.integrate import solve_ivp



#posizioni iniziali nei due assi
x0 = 0
y0 = -2

#velocita iniziali nei due assi
v0 = +5
vy0 = 0


#costanti omega molle
omegax = 2
omegay = 3


Tper = 2*np.pi/omegax


nper = 3 # numero di periodo
T    = nper*Tper #tempo totale simulazione
N_per = 160 # numero di intervalli di tempo in un perido
N    = N_per*nper # numero di intervalli di tempo 
dt   = T/N # intervallo di tempo



class mass_2spring:

    """CLASSE PER CORPO VINCOLATO DA DUE MOLLE SU CARRELLI

    omegax: valore costante omega per molla asse x
    omegay valore costante omega per molla asse y
    """
    def __init__(self,  omegax, omegay):
        self.omegax = omegax
        self.omegay = omegay

    
    def __call__(self, t, u):

        """dato il vettore di stato u [x,y,vx,vy] e il tempo restituisce il vettore FLUSSO[vx, vy, ax, ay]
        """
        x, y, vx, vy = u
        dx = vx
        dy = vy
        dvx = -self.omegax**2 * x
        dvy = -self.omegay**2 * y
        return [dx, dy, dvx, dvy]

nper = 3 # numero di periodo
T    = nper*Tper #perido
N_per = 20 # numero di intervalli di tempo in un perido
N    = N_per*nper # numero di intervalli di tempo 
dt   = T/N # intervallo di tempo

tsol  = np.linspace(0,T,N+1)
xsol = x0*np.cos(omegax*tsol) + v0/omegax*np.sin(omegax*tsol)

vsol  = -omegax*x0*np.sin(omegax*tsol) + v0*np.cos(omegax*tsol)
vysol = -omegay*y0*np.sin(omegay*tsol) + vy0*np.cos(omegay*tsol)

ysol = y0*np.cos(omegay*tsol) + vy0/omegay*np.sin(omegay*tsol)


#VETTORE DI STATO   [x,y,vx,vy]
u0 = np.array([x0,y0, v0, vy0])    # vettore di stato inizializzato a t=0


# metodo Runge Kutta predictor corrector 4/5 ordine
sol = solve_ivp(mass_2spring(omegax=omegax, omegay=omegay), [0, T], u0 , method='RK45', t_eval=tsol)

fig,ax = plt.subplot_mosaic([['x', 'y', 'xy'], ['vx', 'vy', 'xy']])    
fig.suptitle('solve_ivp RK45')
fig.set_size_inches(12,6)

ax['x'].plot(sol.t, sol.y[0,:],'+r',label = 'RK45')
ax['x'].plot(tsol, xsol,'-b',label = 'exact')
ax['x'].legend()
ax['x'].set_xlabel("t [s]")
ax['x'].set_ylabel("x [m]")

ax['y'].plot(sol.t, sol.y[1,:],'+r',label = 'RK45')
ax['y'].plot(tsol, ysol,'-b',label = 'exact')
ax['y'].legend()
ax['y'].set_xlabel("t [s]")
ax['y'].set_ylabel("y [m]")

ax['vx'].plot(sol.t, sol.y[2,:],'+r',label = 'RK45')
ax['vx'].plot(tsol, vsol,'-b',label = 'exact')
ax['vx'].legend()
ax['vx'].set_xlabel("t [s]")
ax['vx'].set_ylabel("vx [m]")
ax['vx'].set_title("velocity x")


ax['vy'].plot(sol.t, sol.y[3,:],'+r',label = 'RK45')
ax['vy'].plot(tsol, vysol,'-b',label = 'exact')
ax['vy'].legend()
ax['vy'].set_xlabel("t [s]")
ax['vy'].set_ylabel("vy [m]")
ax['vy'].set_title("velocity y")





ax['xy'].grid(True)
ax['xy'].set_aspect('equal', adjustable='box')
ax['xy'].plot(x0, y0 , '.g')
ax['xy'].plot(sol.y[0,:], sol.y[1,:] )
ax['xy'	].set_title("POSITION in XY PLANE")

fig.tight_layout()
plt.show()
